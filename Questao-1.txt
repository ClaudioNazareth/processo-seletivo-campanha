************************************************************************************************************************
Juntamente com o Código, deve-se documentar a estratégia utilizada para a criação da aplicação, a arquitetura utilizada
e os padrões. A documentação pode ser feita via GIT/Bitbucket;

Para o projeto optei por utilizar Spring Boot no qual se tornou o padrão de facto para projetos Java, pelas facilidas e
integrações oferecidas e pelo fato de vir com Tomcat embarcado.

Para persistencia optei por utilizar como banco de dados o MongoDB pela flexibilidade , desempenho e similidade(BSON -
JSON) com os com o Formato Json que será trafegado nas APIS.
Também optei por utilizar Spring Data Mongo por abstrair e facilitar toda a parte dos Repositórios e servir como ponto de
partida para os comandos de CRUD de persistencia de dados. Já ofere algumas interfaces basicas como as de busca e inserção.

Para criar os serviços REST optei pelo Spring Rest pela facilidade e integração com Spring boot ao invés de utilizar
o JAX-RS com JERSEY.

Para criar a aplicação foi implementado os serviço Rest para o CRUD de Campanhas

 Para tal Foram criadas 2 Entidades Campanha e CampanhaResource:
 - A entidade Campanha faz a modelagem Java - MongoDB
 - A entidade CampanhaResource é a entidade que vai ser Serializada para ser recebida e entregue pelas interfaces da
   API em Formato Json. Tende a ser mais Leve e com anotações para documentação Swagger

 O serviço de criação de Campanhas é acionado pelo método POST em /api/v1/campanhas , algumas informações sobre:
 - O conteúdo trafegado entre o cliente e o serviço suporta o formato application/json.
 - Recebe um um Json com os seguintes campos (nome, timeCoracaoId, inicioVigencia e fimVigencia)
 - OS campos de Data devem ter o seguinte formato : "YYYY-MM-DD"
 - Após a criação da campanha é retornado no HEADER a URI da campanha criada

O serviço de consultas das campanhas é acionado pelo método GET em /api/v1/campanhas e api/v1/campanhas/{id} , algumas informações sobre:
 - O conteúdo trafegado entre o cliente e o serviço suporta o formato application/json.
 - Retorna um um Json com os seguintes campos (nome, timeCoracaoId, inicioVigencia e fimVigencia)

O serviço de deletar uma campanhas é acionado pelo método DELETE em api/v1/campanhas/{id} , algumas informações sobre:
  - Retorna um um Json com os seguintes campos (nome, timeCoracaoId, inicioVigencia e fimVigencia)
  - O sistema retorna o status 204 No Content;

O serviço de atualizar a campanha é acionado pelo método PUT(Não foi implementado o PATCH para esta demo) api/v1/campanhas/{id} , algumas informações sobre:
  - O conteúdo trafegado entre o cliente e o serviço suporta o formato application/json.
  - Recebe um um Json com os seguintes campos (nome, timeCoracaoId, inicioVigencia e fimVigencia) para atualizar atualizaçaão dos campos
  - O sistema retorna o status 204 No Content;

 Documento - campanha

------->>>>     Pacotes e componentes:

br.com.campanha - Pacote principal de todo o aplicativo.
 - ApplicationStarter - Responsável por configurar o Spring boot e Inicializar a aplicação

br.com.campanha.api  - Pacote com os componentes da API REST
 - domain - Pacote com as entidades de dominio para a API
    - CampanhaResource - Representa o Resource que será enviado pela API no formato JSON
    - ErrorInfo - Representa a mensagem de erro que será retornada pela api com URL e a exception
 - rest
    - CampanhaControler - Classe para export os endpoints REST do CRUD de campanhas

br.com.campanha.configuration -  Pactote com as classes de configurações da aplicação
 - Swaggerconfig - Classe para configurar o Swagger na aplicação e mapear os EndPoints

br.com.campanha.domain - Pacote com as classes de dominio para mapear com o banco de dados
 - Campanha - Clase que mapeia o Objecto java com a documento do MongoDB

br.com.campanha.exception - Pacote com a execções criadas para aplicação
 - RecursoNaoEncontradoException - Exceção que será lançada quando a busca por ID não encontrar nenhum resultado

br.com.campanha.repository - Pacote para as classes de Repository (Acesso ao banco de dados)
 - CampanhaRepository - Interface que implementa o Spring Data Mongo para acesso ao MongoDB - Operações de CRUD

br.com.campanha.service - Pacote para as classes de serviço da aplicação
 - CampanhaService - Interface para encapsular as operaçoes de CRUD e Regras de Campanha
  -impl
   - CampanhaServiceImpl - Implementação da interface

br.com.campanha.webhook - Pacote para configuração do webhook para avisar APIS sobre atualização do Status

------->>>> Testes  e Regras:

test/br.com.campanha - ApplicationStarterTest - Valida se a inicialização da applicação carrega os dados

test/br.com.campanha.repository - Validação dos repositórios
 * Testa o requisito 1 -  O Sistema não deverá retornar campanhas que estão com a data de vigência vencidas
 - CampanhaRepositoryTest.deveTrazerCampanhasComDataDeFimVigenciaoSuperiorADataDoParametro()
                         .naoDeveTrazerCampanhasComDataDeFimVigenciaoInferiorADataDoParametro()

 * Faz parte o requisito 2 - trazer as campanhas ativas no período
 - CampanhaRepositoryTest.deveTrazerCampanhasAtivasPorPeriodo()
                         .naoDeveTrazerCampanhasQuandoPeriodoEstiverForaDosParametros()

test/br.com.campanha.service - Pacote para teste dos serviços
 * Testa o requisito 2 -
 * caso exista uma campanha ou N campanhas associadas naquele período, o sistema deverá somar um dia no término da vigência de cada campanha já existente.*
 * Caso a data final da vigência seja igual a outra campanha, deverá ser acrescido um dia a mais de forma que as campanhas não tenham a mesma data de término de vigência.
  - CampanhaServiceTest.campanhaDeveSerCadastradasComDadosCorretos()
                       .buscarCampanhasAtivasPorPeriodo()

test/br.com.campanha.api.rest - Pacote para teste dos Controles
 - CampanhaControllerTest - Testa todos os serviços Rest de Camapanha

test/br.com.campanha.fixture - Pacote para geradores de dados para teste
 - CampanhaControllerTest - Testa todos os serviços Rest de Camapanha


************************************************************************************************************************